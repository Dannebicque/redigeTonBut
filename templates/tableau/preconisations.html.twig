{% extends 'base.html.twig' %}

{% block header %}
    Tableau Préconisations pour le B.U.T. {{ annee.ordre }}
{% endblock %}

{% block content %}
    <ul class="nav nav-tabs nav-tabs-title nav-tabs-line-title responsive-tabs" id="lineTitleTabsContainer" role="tablist">
        {% for semestre in semestres %}
            <li class="nav-item" role="presentation">
                <a class="nav-link {% if loop.first %}active{% endif %}" data-bs-toggle="tab" href="#semestre_{{ semestre.id }}" role="tab"
                   aria-selected="true">{{ semestre.libelle }}</a>
            </li>
        {% endfor %}
    </ul>
    <div class="tab-content" x-data="updatePreconisations">

        {% for semestre in semestres %}
            <div class="tab-pane {% if loop.first %}active{% endif %}" id="semestre_{{ semestre.id }}" role="tabpanel">
                <div class="card">
                    <div class="card-body">
                        {{ render(controller(
                            'App\\Controller\\TableauController::tableauPreconisationsSemestre',
                            { 'semestre': semestre.id }
                        )) }}
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
{% endblock %}

{# todo: bouton export, refresh du tableau, possibilité ed masquer des données (menu en modal?), affichage code
et/ou libellé. Bouton pour ajouter ressource ou SAE rapidement ?
Si croix possibilité d'indiquer un commentaire ? ECTS ? Heures préconnisés ? #}


{% block javascripts %}
    {{ parent() }}
    <script>
      document.addEventListener('alpine:init', () => {
        Alpine.data('updatePreconisations', () => ({
            donnees: {
              1: { competences: {}, ressources: {}, saes: {}},
              2: {competences: {}, ressources: {}, saes: {}},
              3: {competences: {}, ressources: {}, saes: {}},
              4: {competences: {}, ressources: {}, saes: {}},
              5: {competences: {}, ressources: {}, saes: {}},
              6: {competences: {}, ressources: {}, saes: {}},
            },
          async init () {
            this.donnees = await fetch(Routing.generate('tableau_api_preconisation')).then(r => {
              return r.json()
            })
          },
          updateSae (e) {
            fetch(Routing.generate('formation_apc_sae_coeff_update_ajax', {sae: e.target.dataset.sae, competence:e
                .target.dataset.competence}), {
              method: 'POST',
              body: JSON.stringify({
                valeur: e.target.value
              })
            }).then(async r => {
              this.donnees = await fetch(Routing.generate('tableau_api_preconisation')).then(r => {
                return r.json()
              })
            })

          },
          updateRessource (e) {
            fetch(Routing.generate('formation_apc_ressource_coeff_update_ajax', {ressource: e.target.dataset.ressource,
              competence:e.target.dataset.competence}), {
              method: 'POST',
              body: JSON.stringify({
                valeur: e.target.value
              })
            }).then(async r => {
              this.donnees = await fetch(Routing.generate('tableau_api_preconisation')).then(r => {
                return r.json()
              })
            })

          },
          updateCompetence (e) {
            fetch(Routing.generate('administration_apc_competence_update_ects', {semestre: e.target.dataset.semestre,
              competence:e.target.dataset.competence}), {
              method: 'POST',
              body: JSON.stringify({
                valeur: e.target.value
              })
            }).then(async r => {
              this.donnees = await fetch(Routing.generate('tableau_api_preconisation')).then(r => {
                return r.json()
              })
            })

          },
          afficheValeurCoefficient (tableau, id, competence) {
                if (id in tableau) {
                  if (competence in tableau[id]) {
                    return tableau[id][competence].coefficient;
                  }
                }
                return ''
          },
          afficheValeurTotal (tableau, id, cle = 'total') {
                if (id in tableau) {

                    return tableau[id][cle];

                }
                return ''
          },
          numberFormat (valeur) {
            if (typeof valeur !== 'undefined') {
              return valeur.toFixed(2)
            }
          }
        }))
      })
    </script>
{% endblock %}
